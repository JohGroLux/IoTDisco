///////////////////////////////////////////////////////////////////////////////
// gfp_sub.s43: Multi-Precision Subtraction Modulo a Pseudo-Mersenne Prime.  //
// This file is part of SECC430, a Scalable ECC implementation for MSP430.   //
// Version 0.8.0 (2023-10-24), see <http://www.cryptolux.org/> for updates.  //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This program is free software: you can redistribute it and/or modify it   //
// under the terms of the GNU General Public License as published by the     //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This program is distributed in the hope that   //
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied     //
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  //
// GNU General Public License for more details. You should have received a   //
// copy of the GNU General Public License along with this program. If not,   //
// see <http://www.gnu.org/licenses/>.                                       //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void gfp_sub_msp(UINT16 *r, const UINT16 *a, const UINT16 *b, UINT16 c,
//                  int len);
// 
// Description:
// ------------
// The function <gfp_sub_msp> computes the modular difference <r> = <a> - <b>
// mod p, where <a> and <b> are two multiple-precision integers, and p is a
// pseudo-Mersenne prime. Both operands and the result are represented by
// arrays of 16-bit unsigned integers (the element with index 0 is the least
// significant word). The two operands <a> and <b>, as well as the result <r>,
// consist of <len> words. Note that <len> must be >= 2. The pseudo-Mersenne 
// prime p is given by p = 2^(16*<len>-1) - <c>, where <c> is at most 15 bits
// long (i.e. <c> must be in the range [1, 2^15-1]). The result may not be
// fully reduced, which means the result is not necessarily the least non-
// negative residue modulo p. This function is described in the paper "Energy-
// Efficient Elliptic Curve Cryptography for MSP430-Based Wireless Sensor 
// Nodes" (Proceedings of ACISP 2016, Springer Verlag).
// 
// Operands:
// ---------
// r: address of UINT16 array for result (must have space for 'len' words)
// a: address of UINT16 array for first operand (has length of 'len' words)
// b: address of UINT16 array for second operand (has length of 'len' words)
// c: constant c of the prime p = 2^(16*'len'-1) - c, where 1 <= 'c' <= 2^15-1
// len: number of UINT16 words of 'a', 'b', and 'r' ('len' must be >= 3)
// 
// Execution time (including function-call overhead):
// --------------------------------------------------
// MSP430F1611: len=10 (160 bit): 236 cycles, len=12 (192 bit): 268 cycles,
//              len=14 (224 bit): 300 cycles, len=16 (256 bit): 332 cycles
// 
// Version history:
// ----------------
// 0.7.0: Lin's original implementation from her M.Sc. project
// 0.7.1: Performance improvements and further documentation added by Johann
// 0.7.2: First iteration peeled off from loop, saving one RRA in the loop


#include "mspcfg.h"


// Define register names

; MSW holds the most significant word of the difference of 'a' and 'b'
#define MSW R8
; SUMLO holds the lower part (i.e. 16 LSBs) of the sum of two or more words
#define SUMLO R9
; SUMLO holds the upper part (i.e. carries) of the sum of two or more words
#define SUMHI R10
; LEN holds 'len' parameter, i.e. the number of words of arrays 'a', 'b', 'r'
#define LEN R11
; RPTR holds a pointer for writing words to array 'r'
#define RPTR R12
; APTR holds a pointer for loading words from array 'a'
#define APTR R13
; BPTR holds a pointer for loading words from array 'b'
#define BPTR R14
; CWORD holds parameter 'c', which defines the prime p = 2^(16*'len'-1) - c
#define CWORD R15


NAME gfp_sub_msp            ; module name
PUBLIC gfp_sub_msp          ; make module name visible to other modules
RSEG CODE                   ; module is relocatable and placed in CODE segment
gfp_sub_msp:
    
    // Push callee-saved registers on stack, get 5th parameter from stack, and
    // disable interrupts
    
    PUSH_R8_TO_R11          ; macro to push registers R8-R11 (see mspcfg.h)
    MOV  OFFSET(4)(SP), LEN ; copy parameter 'len' from stack (see mspcfg.h)
    DINT                    ; disable interrupts since we use multiplier
    NOP                     ; required for DINT
    
    // Instead of computing the modular subtraction r = a - b mod p directly,
    // we compute the sum s = 4*p + a - b and reduce it modulo p, which greatly
    // simplifies matters since s is always positive, even in the most extreme
    // case when a is 0 and b has the maximum possible value. In this way, the
    // modular subtraction can be implemented with a single loop, similar to
    // the modular addition. Since the prime p has the form p = 2^k - c, where
    // k = 16*len-1, we can write s = 4*2^k + a - b - 4*c. Note that p has a 
    // length of k + 2 = 16*len + 1 bits, which means the sum s can be up to
    // k + 3 = 16*len + 2 bits long. We perform the reduction of s modulo p by
    // first extracting the three most significant bits of the (k+3)-bit sum s,
    // multiplying them by c, and adding the obtained product to the lower k 
    // bits of s, i.e. we compute r = (s div 2^k)*c + (s mod 2^k). The obtained
    // result r may be not fully reduced (i.e. r may be slightly larger than
    // p), but it will always fit into an array of len 16-bit words.
    
    // Similar to the modular addition gfp_add_msp(), we start the computation
    // of the sum s = 4*2^k + a - b - 4*c at the most significant 16-bit words
    // of a and b. The most significant word of 2^k is always 0x8000 since k is
    // 16*len - 1; all other words of 2^k are 0. On the other hand, c is very
    // small and only needs to be considered at the least significant word of
    // the sum s. Consequently, the most significant word of the sum is simply
    // s[len-1] = 4*0x8000 + a[len-1] - b[len-1] and can have a length of up to
    // 18 bits. The instruction sequence below performs this computation and
    // places s[len-1] in the SUMHI|SUMLO register pair. Then, we split these 
    // 18 bits up into an upper part, consisting of the three most significant
    // bits, and a lower part (comprising the 15 least significant bits) that
    // is stored in the register MSW. However, since the computation of the
    // remaining len-1 words of s can yield a negative result, it could happen
    // that the final result r is negative if it is not corrected through an
    // addition of p. To avoid this problem, we do not add 4*0x8000 = 0x20000
    // to s[len-1] but only 0x20000 - 4 = 0x1FFFC and correct this later by
    // adding 4 to the register MSW together with the (potentially negative)
    // carry resulting from the computation of s[len-2] = a[len-2] - b[len-2].
    
    MOV  #1, SUMHI          ; initialize SUMHI with 1
    MOV  #0xFFFC, SUMLO     ; initialize SUMLO with 0xFFFC
    ADD  LEN, LEN           ; double LEN, holds now num of bytes of array 'a'
    SUB  #2, LEN            ; len-2 is the offset (in bytes) to the MSW of 'a'
    ADD  LEN, APTR          ; A-pointer now contains the address of a[len-1]
    ADD  @APTR, SUMLO       ; add a[len-1] to SUMLO register via A-pointer
    ADC  SUMHI              ; add carry flag to SUMHI register
    SUB  LEN, APTR          ; set A-pointer back to the address of a[0]
    ADD  LEN, BPTR          ; B-pointer now contains the address of b[len-1]
    SUB  @BPTR, SUMLO       ; subtract b[len-1] from SUMLO register via B-ptr
    SBC  SUMHI              ; subtract carry flag from SUMHI register
    SUB  LEN, BPTR          ; set B-pointer back to the address of b[0]
    
    // In the next step, the 18-bit sum held in the SUMHI|SUMLO register pair
    // is split up into an upper part, consisting of the three most significant
    // bits, and a lower part (comprising the 15 least significant bits). The
    // upper part is multiplied by c and the obtained product (which can be up
    // to 18 bits long) is placed in the SUMHI|SUMLO register pair. On the 
    // other hand, lower part is stored in the register MSW and will be used
    // again at the end of the function.
    
    RLA  SUMLO              ; shift SUMLO left; carry flag is now MSB of SUMLO
    RLC  SUMHI              ; shift SUMHI left via carry; carry flag is now 0
    RRC  SUMLO              ; shift SUMLO right; MSB of SUMLO is now 0
    MOV  SUMLO, MSW         ; copy SUMLO to MSW reg (contains now sum&0x7FFF)
    MOV  SUMHI, &MPY        ; copy SUMHI (contains the 2 MSBs of sum) to &MPY
    MOV  CWORD, &OP2        ; copy CWORD to &OP2; this starts multiplication
    MOV  &RESLO, SUMLO      ; copy &RESLO (lower half of product) to SUMLO reg
    MOV  &RESHI, SUMHI      ; copy &RESHI (upper half of product) to SUMHI reg
    
    // Now we need to add the least significant word of 4*c to the SUMHI|SUMLO
    // register pair. However, instead of adding 4*p[0], we subtract 4*c from 
    // SUMHI|SUMLO by subtracting (c<<1) twice. Note that (c<<1) fits into a
    // single register since c is at most 15 bits long. The subtraction of 4*c
    // generates a borrow, which we will propagate up to the most significant
    // word (using the addition loop below) and destroy it there by adding 1
    
    ADD  CWORD, CWORD       ; double CWORD, contains now (c<<1)
    SUB  CWORD, SUMLO       ; subtract (c<<1) from SUMLO register
    SBC  SUMHI              ; subtract carry flag from SUMHI register
    SUB  CWORD, SUMLO       ; subtract (c<<1) from SUMLO register
    SBC  SUMHI              ; subtract carry flag from SUMHI register
    ADD  @APTR+, SUMLO      ; add a[0] to SUMLO (with increment) via A-pointer
    ADC  SUMHI              ; add carry flag to SUMHI register
    SUB  @BPTR+, SUMLO      ; subtract b[0] from SUMLO (with incr) via B-ptr
    SBC  SUMHI              ; subtract carry flag from SUMHI register
    MOV  SUMLO, 0(RPTR)     ; write SUMLO to r[0] via R-pointer
    ADD  #2, RPTR           ; increment R-pointer
    MOV  SUMHI, SUMLO       ; copy SUMHI register to SUMLO
    RRA  SUMHI              ; 1-bit arithmetic right-shift of SUMHI register
    RRA  SUMHI              ; 2nd shift; SUMHI is now either -1 (0xFFFF) or 0
    SUB  #2, LEN            ; decrement LEN register by 2
    
    // In the i-th iteration of the addition loop, the word a[i] is added to
    // the content of the SUMHI|SUMLO register pair, while b[i] is subtracted
    // from it. Then, SUMLO is written to r[i] (via the R-pointer) and the
    // SUMHI|SUMLO register pair is shifted to the right by 16 bits to prepare
    // for the next iteration. Note that we do not need to explitly add 4*p[i]
    // to SUMHI|SUMLO since we propagate the borrow generated above to the
    // next-higher word(s) by performing an *arithmetic* right-shift of the 
    // SUMHI|SUMLO register pair (this works because p[i] is always 0xFFFF for
    // 1 <= i <= len-2). After this right-shift, SUMHI|SUMLO is either -2, -1,
    // 0, or 1 (the subtraction of b[i] may generate a second borrow, whereas
    // the addition of a[i] may generate a carry). The loop is iterated only
    // len-1 times since the most significant words (i.e. a[len-1], b[len-1])
    // have already been processed above
    
LOOP:
    ADD  @APTR+, SUMLO      ; add a[i] to SUMLO (with increment) via A-pointer
    ADC  SUMHI              ; add carry flag to SUMHI register
    SUB  @BPTR+, SUMLO      ; subtract b[i] from SUMLO (with incr) via B-ptr
    SBC  SUMHI              ; subtract carry flag from SUMHI register
    MOV  SUMLO, 0(RPTR)     ; write SUMLO to r[i] via R-pointer
    ADD  #2, RPTR           ; increment R-pointer
    MOV  SUMHI, SUMLO       ; copy SUMHI register to SUMLO
    RRA  SUMHI              ; 1-bit arithmetic right-shift of SUMHI register
    SUB  #2, LEN            ; decrement LEN register by 2
    JNZ  LOOP               ; loop terminates when LEN equals 0
    
    // At the end of the loop, R-pointer contains the address of r[len-1]. The
    // sum of the two most significant words is already in the MSW register; we
    // just need to add it to the SUMLO register. In the addition loop, the
    // words p[i] of the prime p were processed by simply propagating the
    // borrow generated by the subtraction of 4*c to the next-higher word(s),
    // which is possible since p[i] is 0xFFFF for 1 <= i <= len-2. However, we
    // added 4*p[len-1] = 0x1FFFC directly to the sum of the most significant
    // words. In order to get the correct result, it is necessary to add 3 to
    // the SUMLO register. Furthermore, we need to add 1 to SUMLO to stop the
    // propagation of the borrow mentioned above. After these final additions,
    // we write the result (which can be at most 16 bits long) to r[len-1]
    
    ADD  MSW, SUMLO         ; add MSW (i.e. sum&0x7FFF) to SUMLO register
    ADD  #4, SUMLO          ; add 4 to SUMLO register
    MOV  SUMLO, 0(RPTR)     ; write SUMLO to r[len-1] via R-pointer
    
    // Enable interrupts and pop callee-saved registers from stack
    
    EINT_                   ; macro to enable interrupts (see mspcfg.h)
    POP_R11_TO_R8           ; macro to pop registers R11-R8 (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
