;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gfp_sub.s43: Subtraction of elements of a pseudo-Mersenne prime field.    ;;
;; This file is part of SECC430, a Scalable implementation of Elliptic Curve ;;
;; Cryptography with Assembly optimizations for MSP430(X) microcontrollers.  ;;
;; Version 1.1.2 (24-09-24), see <http://github.com/johgrolux/> for updates. ;;
;; License: GPLv3 (see LICENSE file), other licenses available upon request. ;;
;; ------------------------------------------------------------------------- ;;
;; This program is free software: you can redistribute it and/or modify it   ;;
;; under the terms of the GNU General Public License as published by the     ;;
;; Free Software Foundation, either version 3 of the License, or (at your    ;;
;; option) any later version. This program is distributed in the hope that   ;;
;; it will be useful, but WITHOUT ANY WARRANTY; without even the implied     ;;
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  ;;
;; GNU General Public License for more details. You should have received a   ;;
;; copy of the GNU General Public License along with this program. If not,   ;;
;; see <http://www.gnu.org/licenses/>.                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Function prototype:
;; -------------------
;; void gfp_sub_msp(Word *r, const Word *a, const Word *b, Word c, int len);
;; 
;; Description:
;; ------------
;; The function `gfp_sub_msp` computes the difference $r = a - b \bmod p$ of
;; two elements $a$ and $b$ of a pseudo-Mersenne prime field. The prime $p$ is
;; given by $p = 2^k - c$, where $k$ is a multiple of the word-size minus 1
;; (determined by parameter `len`) and $c$ is at most 14 bits long. Operands
;; $a$ and $b$ are allowed to be larger than $p$. The result $r$ may not be
;; fully reduced, but $r$ is always less than $2p$.
;; 
;; Operands:
;; ---------
;; `r`: pointer to array for result, must have space for `len` words
;; `a`: pointer to array containing 1st operand, has a length of `len` words
;; `b`: pointer to array containing 2nd operand, has a length of `len` words
;; `c`: word containing constant $c$ of prime $p$, $c \in [1, 2^{14}-1]$
;; `len`: number of words of arrays `a`, `b`, and `r`, must be >= 2
;; 
;; Execution time (including function-call overhead):
;; --------------------------------------------------
;; MSP430F1611: len=10 (160 bit): 220 cycles, len=12 (192 bit): 252 cycles,
;;              len=14 (224 bit): 284 cycles, len=16 (256 bit): 316 cycles
;; 
;; Version history:
;; ----------------
;; 1.0.0: Lin's original implementation from her M.Sc. project
;; 1.0.1: Performance improvements and further documentation added by Johann
;; 1.0.2: First iteration peeled off from loop, saving one rra.w in the loop
;; 1.1.0: Reduced maximum length of constant `c` from 15 to 14 bits.
;; 1.1.1: Replaced multiplication c*(sum>>15) by addition of masked values.
;; 1.1.2: Put the first iteration back into the loop body.


#include "mspcfg.h"


RSEG CODE
NAME gfp_sub_msp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; REGISTER NAMES, CONSTANTS, AND MACROS ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Register `Mask` contains a bit-mask (which is either 0xFFFF or 0)
#define Mask r7
;; Register `Msw` contains the most-significant word of the diff $a-b$
#define Msw r8
;; Register `SumLo` contains the lower word of a 2-word (32-bit) sum
#define SumLo r9
;; Register `SumHi` contains the upper word of a 2-word (32-bit) sum
#define SumHi r10
;; Register `Len` contains the length of the arrays (in words or bytes)
#define Len r11
;; Register `Rptr` points to a word contained in the result-array `r`
#define Rptr r12
;; Register `Aptr` points to a word contained in the operand-array `a`
#define Aptr r13
;; Register `Bptr` points to a word contained in the operand-array `b`
#define Bptr r14
;; Register `Cword` holds the 14-bit constant c of prime $p = 2^k - c$
#define Cword r15


PUBLIC gfp_sub_msp
gfp_sub_msp:
    
    ;; At first, all callee-saved registers are pushed on the stack and the
    ;; fifth parameter `len` is copied from the stack.
    
    PUSH_R7_TO_R11          ;; macro to push 5 registers r7-r11 (mspcfg.inc)
    mov.w   OFS(5)(sp), Len ;; load param `len` from stack to Len (mspasm.inc)
    
    ;; Instead of computing the modular subtraction $r = a - b \bmod p$, the
    ;; sum $s = 4p + a - b$ is computed and reduced modulo $p$, which is a lot
    ;; simpler because $s$ is always positive. In this way, the result can be
    ;; obtained with a single loop, similar to the modular addition. The MSW of
    ;; $4p$ is $4 \cdot 0x8000 = 0x20000$. However, since intermediate sum in
    ;; the loop can be negative (see C function), the MSW of $p$ is split into
    ;; $0x20000 - 4 = 0x1FFFC$ and $4$. The first part $0x1FFFC$ is used before
    ;; entering the loop to compute the MSW of the result, i.e., to compute
    ;; sum = 0x1FFFC + a[len-1] - b[len-1]. Then, the second part $4$ is added
    ;; to the sum after termination of the loop (together with a carry/borrow
    ;; from the loop). The sum computed before entering the loop can be up to
    ;; 18 bits long. The lower 16 bits are put in the Msw register and the two
    ;; upper bits in the SumHi register.
    
    mov.w   #1, SumHi       ;; set SumHi to 1
    mov.w   #0xFFFC, Msw    ;; set Msw to 0xFFFC
    add.w   Len, Len        ;; set Len to $2len$ (number of bytes of operands)
    sub.w   #2, Len         ;; set Len to $len-2$
    add.w   Len, Aptr       ;; set A-pointer to address of a[len-1]
    add.w   @Aptr, Msw      ;; add a[len-1] to Msw
    adc.w   SumHi           ;; add c-flag to SumHi
    sub.w   Len, Aptr       ;; set A-pointer to address of a[0]
    add.w   Len, Bptr       ;; set B-pointer to address of b[len-1]
    sub.w   @Bptr, Msw      ;; subtract b[len-1] from SumLo
    sbc.w   SumHi           ;; subtract c-flag from SumHi
    sub.w   Len, Bptr       ;; set B-pointer to address of b[0]
    
    ;; As part of the reduction, the product c*(sum>>15) and most-significant
    ;; result-word (sum&0x7FFF) are computed. The product can be up to 17 bits
    ;; long (since (sum>>15) is max 3 bits long) and is put in the SumHi|SumLo
    ;; register pair. Similar to the modular addition, the product is computed
    ;; through additions of three masked values (generated from the three bits
    ;; of (sum>>15), which is max 5) instead of a multiplication. However, in
    ;; contrast to the modular addition, $4c$ is subtracted from SumHi|SumLo as
    ;; part of the modular reduction. After the subtraction, SumHi is either -1
    ;; (0xFFFF) or 0.
    
    rla.w   Msw             ;; shift Msw left; c-flag is 16th bit of sum
    subc.w  SumLo, SumLo    ;; SumLo is 0 if 16th bit is 1, 0xFFFF otherwise
    inv.w   SumLo           ;; SumLo is 0xFFFF if 16th bit is 1, 0 otherwise
    and.w   Cword, SumLo    ;; set SumLo to `c` if 16th bit is 1, 0 otherwise
    add.w   Cword, Cword    ;; double Cword to 2*c (c-flag is now 0!)
    rrc.w   Msw             ;; set Msw to (sum&0x7FFF)
    rrc.w   SumHi           ;; shift SumHi right; c-flag is 17th bit of sum
    subc.w  Mask, Mask      ;; Mask is 0 if 17th bit is 1, 0xFFFF otherwise
    inv.w   Mask            ;; Mask is 0xFFFF if 17th bit is 1, 0 otherwise
    and.w   Cword, Mask     ;; set Mask to 2*c if 17th bit is 1, 0 otherwise
    add.w   Mask, SumLo     ;; set SumLo to value in [0,3c] based on bits 16,17
    add.w   Cword, Cword    ;; double Cword to 4*c
    rrc.w   SumHi           ;; shift SumHi right; c-flag is 18th bit; SumHi = 0
    subc.w  Mask, Mask      ;; Mask is 0 if 18th bit is 1, 0xFFFF otherwise
    sub.w   Cword, SumLo    ;; subtract 4*c from SumLo
    sbc.w   SumHi           ;; propagate c-flag to SumHi (is either 0 or -1)
    bic.w   Mask, Cword     ;; set Cword to 4*c if 18th bit is 1, 0 otherwise
    add.w   Cword, SumLo    ;; set SumLo to (sum>>15) - 4*c
    adc.w   SumHi           ;; add c-flag to SumHi (is still either 0 or -1)
    
    ;; In each iteration of the subtraction loop, the word a[i] is added to the
    ;; sum in the SumHi|SumLo register-pair and b[i] subtracted from it. After
    ;; these operations, SumHi is in the range [-2, 1]. Then, the lower word of
    ;; the sum is written to r[i] using R-pointer and the sum is shifted one
    ;; word to the right. This shift has to an arithmetic right-shift because
    ;; the sign of the sum must be preserved (i.e., after the shift, SumHi is
    ;; either -1 (0xFFFF) or 0, which can be achieved with a 1-bit right-shift
    ;; of SumHi). The subtraction loop is iterated $len-1$ times (i.e., from
    ;; $i = 0$ to $i = len-2$) since the difference of the two most-significant
    ;; words a[len-1] and b[len-1] was already computed above.
    
SUBLOOP:
    add.w   @Aptr+, SumLo   ;; add a[i] to SumLo (with increment of A-pointer)
    adc.w   SumHi           ;; add generated c-flag to SumHi
    sub.w   @Bptr+, SumLo   ;; subtract b[i] from SumLo (with incr of B-ptr)
    sbc.w   SumHi           ;; subtract generated c-flag from SumHi
    mov.w   SumLo, 0(Rptr)  ;; write SumLo to r[i]
    add.w   #2, Rptr        ;; increment R-pointer
    mov.w   SumHi, SumLo    ;; copy SumHi to SumLo
    rra.w   SumHi           ;; set SumHi to either -1 (i.e., 0xFFFF) or 0
    sub.w   #2, Len         ;; decrement loop-counter
    jnz     SUBLOOP         ;; jump to start of loop if loop-counter != 0
    
    ;; After termination of the subtraction-loop, R-pointer contains the
    ;; address of r[len-1]. The most-significant result-word (sum&0x7FFF) is
    ;; already in register Msw, but the carry from the subtraction-loop still
    ;; needs to be added to it. Also 4 has to be added to prevent that the MSW
    ;; of the result becomes negative. This last result-word, which can be up
    ;; to 16 bits long, is stored to r[len-1].
    
    add.w  SumLo, Msw       ;; add SumLo to (sum&0x7FFF) in Msw
    add.w  #4, Msw          ;; add 4 to Msw
    mov.w  Msw, 0(Rptr)     ;; store Msw to r[len-1]
    
    ;; The final task is to pop the callee-saved registers from the stack.
    
    POP_R11_TO_R7           ;; macro to pop registers R11-R7 (see mspcfg.h)    
    RET_                    ;; RET_ is either RET or RETA (see mspcfg.h)
    
END
