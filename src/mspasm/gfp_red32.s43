///////////////////////////////////////////////////////////////////////////////
// gfp_red32.s43: Multi-Precision Reduction Modulo a Pseudo-Mersenne Prime.  //
// This file is part of SECC430, a Scalable ECC implementation for MSP430.   //
// Version 1.0.1 (2023-10-24), see <http://www.cryptolux.org/> for updates.  //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This program is free software: you can redistribute it and/or modify it   //
// under the terms of the GNU General Public License as published by the     //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This program is distributed in the hope that   //
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied     //
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  //
// GNU General Public License for more details. You should have received a   //
// copy of the GNU General Public License along with this program. If not,   //
// see <http://www.gnu.org/licenses/>.                                       //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void gfp_red32_msp(UINT16 *r, const UINT16 *a, UINT16 c, int len);
// 
// Description:
// ------------
// 
// Operands:
// ---------
// r: address of UINT16 array for result (must have space for 'len' words)
// a: address of UINT16 array for operand (has length of 'len'+2 words)
// c: constant c of the prime p = 2^(16*'len'-1) - c, where 1 <= 'c' <= 2^15-1
// len: number of UINT16 words of 'r' ('len' must be >= 2)
// 
// Execution time (including function-call overhead):
// --------------------------------------------------
// MSP430F1611: len=10 (160 bit): 222 cycles, len=12 (192 bit): 248 cycles,
//              len=14 (224 bit): 274 cycles, len=16 (256 bit): 300 cycles
// 
// Version history:
// ----------------


#include "mspcfg.h"


// register definitions
#define CARRY R8
#define WORD R9
#define SUMLO R10
#define SUMHI R11
#define RPTR R12
#define APTR R13
#define CWORD R14
#define TWO R14
#define BPTR R15
#define LEN R15


NAME gfp_red32_msp          ; module name
PUBLIC gfp_red32_msp        ; make the main label visible outside this module
RSEG CODE                   ; place program in 'CODE' segment
gfp_red32_msp:
    
    PUSH_R8_TO_R11          ; macro to push registers R8-R11 (see mspcfg.h)
    DINT                    ; disable interrupts since we use multiplier
    NOP                     ; required for DINT
        
    // load a[len-1] and extract its MSB and then clear MSB    
    ADD  LEN, LEN           ; LEN contains now length of array R in bytes
    ADD  APTR, LEN          ; add address of a[0] to LEN (=BPTR) register
    MOV  -2(BPTR), WORD     ; load a[len-1] to WORD reg (BPTR: addr of a[len])
    CLR  CARRY              ; clear CARRY register
    RLC  WORD               ; shift WORD register left through carry
    ADC  CARRY              ; save carry flag in CARRY reg; carry flag is now 0
    RRC  WORD               ; shift WORD right (MSB of WORD is now 0)
    MOV  WORD, -2(BPTR)     ; write WORD register to a[len-1]
    
    // prepare for first loop
    CLR  SUMLO              ; clear SUMLO register
    CLR  SUMHI              ; clear SUMHI register
    MOV  CWORD, &MPY        ; c is first operand for the multiplication
    MOV  #2, TWO            ; set reg TWO to 2 (used to count loop iterations)
    
LOOP1:
    MOV  @BPTR+, WORD       ; load a[len+i] into register WORD
    RRA  CARRY              ; restore carry flag; CARRY register is now 0
    RLC  WORD               ; shift WORD register left through carry
    ADC  CARRY              ; save the carry flag in CARRY register
    MOV  WORD, &OP2         ; shifted WORD is 2nd operand for multiplication
    ADD  RESLO, SUMLO       ; add lower 16 bit of product to SUMLO
    ADDC RESHI, SUMHI       ; add upper 16 bit of product with carry to SUMHI
    ADD  @APTR+, SUMLO      ; add a[i] to SUMLO register
    ADC  SUMHI              ; propagate resulting carry to SUMHI register
    MOV  SUMLO, 0(RPTR)     ; write SUMLO to r[1]
    ADD  #2, RPTR           ; increment R pointer
    MOV  SUMHI, SUMLO       ; move SUMHI to SUMLO
    CLR  SUMHI              ; clear SUMHI register
    DEC  TWO                ; decrement TWO (is used to count loop interations)
    JNZ  LOOP1              ; loop terminates when TWO is 0
    
    // compute word r[2]
    SUB  CARRY, CWORD       ; WORD reg is now either 0xFFFF (if CARRY = 1) or 0
    AND  &MPY, CWORD        ; WORD reg is now either c (CARRY=1) or 0 (CARRY=0)
    ADD  CWORD, SUMLO       ; add WORD to SUMLO
    
    // prepare for addition loop: r[i] = a[i] + carry
    SUB  APTR, LEN          ; subtract APTR (contains address of a[2]) from LEN
    SUB  #4, LEN            ; LEN is now 2*len-4 (we perform len-2 iterations)
    
LOOP2:
    ADD  @APTR+, SUMLO      ; add a[i] to SUMLO register
    ADC  SUMHI              ; propagate resulting carry to SUMHI register
    MOV  SUMLO, 0(RPTR)     ; write SUMLO to r[i]
    ADD  #2, RPTR           ; increment R pointer
    MOV  SUMHI, SUMLO       ; move SUMHI to SUMLO 
    CLR  SUMHI              ; clear SUMHI register
    SUB  #2, LEN            ; decrement LEN by 2
    JNZ  LOOP2              ; jump to 'LOOP2' if LEN is not 0
    
    EINT_                   ; macro to enable interrupts (see mspcfg.h)
    POP_R11_TO_R8           ; macro to pop R11-R8 and return (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
