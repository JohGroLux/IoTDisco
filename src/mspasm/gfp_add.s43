;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gfp_add.s43: Addition of elements of a pseudo-Mersenne prime field.       ;;
;; This file is part of SECC, a Scalable implementation of Elliptic Curve    ;;
;; Cryptography with Assembly optimizations for 16/32-bit microcontrollers.  ;;
;; Version 1.1.0 (13-09-24), see <http://github.com/johgrolux/> for updates. ;;
;; License: GPLv3 (see LICENSE file), other licenses available upon request. ;;
;; Copyright (C) 2014-2024 University of Luxembourg <http://www.uni.lu/>     ;;
;; ------------------------------------------------------------------------- ;;
;; This program is free software: you can redistribute it and/or modify it   ;;
;; under the terms of the GNU General Public License as published by the     ;;
;; Free Software Foundation, either version 3 of the License, or (at your    ;;
;; option) any later version. This program is distributed in the hope that   ;;
;; it will be useful, but WITHOUT ANY WARRANTY; without even the implied     ;;
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  ;;
;; GNU General Public License for more details. You should have received a   ;;
;; copy of the GNU General Public License along with this program. If not,   ;;
;; see <http://www.gnu.org/licenses/>.                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Function prototype:
;; -------------------
;; void gfp_add_msp(Word *r, const Word *a, const Word *b, Word c, int len);
;; 
;; Description:
;; ------------
;; The function `gfp_add_msp` computes the sum $r = a + b \bmod p$ of two
;; elements $a$ and $b$ of a pseudo-Mersenne prime field. The prime $p$ is
;; given by $p = 2^k - c$, where $k$ is a multiple of the word-size minus 1
;; (determined by parameter `len`) and $c$ is at most 14 bits long. Operands
;; $a$ and $b$ are allowed to be larger than $p$. The result $r$ may not be
;; fully reduced, but $r$ is always less than $2p$.
;; 
;; Parameters:
;; -----------
;; `r`: pointer to array for result, must have space for `len` words
;; `a`: pointer to array containing 1st operand, has a length of `len` words
;; `b`: pointer to array containing 2nd operand, has a length of `len` words
;; `c`: word containing constant $c$ of prime $p$, $c \in [1, 2^{14}-1]$
;; `len`: number of words of arrays `a`, `b`, and `r`, must be >= 2
;; 
;; Execution time (including function-call overhead):
;; --------------------------------------------------
;; MSP430F1611: len=10 (160 bit): 226 cycles, len=12 (192 bit): 258 cycles,
;;              len=14 (224 bit): 290 cycles, len=16 (256 bit): 322 cycles
;; 
;; Version history:
;; ----------------
;; 1.0.0: Lin's original implementation from her M.Sc. project.
;; 1.0.1: Performance improvements and further documentation added by Johann.
;; 1.1.0: Reduced maximum length of constant `c` from 15 to 14 bits.


#include "mspcfg.h"


RSEG CODE
NAME gfp_add_msp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; REGISTER NAMES, CONSTANTS, AND MACROS ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Register `Msw` contains the most-significant word of the sum $a+b$
#define Msw r8
;; Register `SumLo` contains the lower word of a 2-word (32-bit) sum
#define SumLo r9
;; Register `SumHi` contains the upper word of a 2-word (32-bit) sum
#define SumHi r10
;; Register `Len` contains the length of the arrays (in words or bytes)
#define Len r11
;; Register `Rptr` points to a word contained in the result-array `r`
#define Rptr r12
;; Register `Aptr` points to a word contained in the operand-array `a`
#define Aptr r13
;; Register `Bptr` points to a word contained in the operand-array `b`
#define Bptr r14
;; Register `Cword` holds the 14-bit constant c of prime $p = 2^k - c$
#define Cword r15


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;; ASSEMBLY FUNCTION FOR ADDITION IN GF(P) ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


PUBLIC gfp_add_msp
gfp_add_msp:
    
    ;; At first, all callee-saved registers on pushed on the stack, the fifth
    ;; parameter `len` is copied from the stack, and interrupts are disabled.
    
    PUSH_R8_TO_R11          ;; macro to push registers r8-r11 (see mspasm.h)
    mov.w   OFS(4)(sp), Len ;; copy parameter `len` from stack (see mspasm.h)
    dint                    ;; disable interrupts (because we use multiplier!)
    nop                     ;; required for dint
    
    ;; The sum of the two most significant words of `a` and `b` (i.e., a[len-1]
    ;; and b[len-1]) is computed first so that the main addition loop needs to
    ;; be executed only once. This sum, which can be up to 17 bits long, is put
    ;; in the SumHi|SumLo register-pair.
    
    clr.w   SumHi           ;; clear SumHi
    add.w   Len, Len        ;; set Len to number of bytes of array `a`
    sub.w   #2, Len         ;; set Len to offset (in bytes) to MSW of array `a`
    add.w   Len, Aptr       ;; set A-pointer to address of a[len-1]
    mov.w   @Aptr, SumLo    ;; load a[len-1] to SumLo
    sub.w   Len, Aptr       ;; set A-pointer to address of a[0]
    add.w   Len, Bptr       ;; set B-pointer to address of b[len-1]
    add.w   @Bptr, SumLo    ;; add b[len-1] to SumLo
    adc.w   SumHi           ;; propagate c-flag to SumHi
    sub.w   Len, Bptr       ;; set B-pointer to address of b[0]
    
    ;; As part of the reduction, the product c*(sum>>15) and most-significant
    ;; result-word (sum&0x7FFF) are computed. The product can be up to 17 bits
    ;; long and is put in the SumHi|SumLo register-pair.
    
    rla.w   SumLo           ;; shift SumLo left; c-flag is SumLo's previous MSB
    rlc.w   SumHi           ;; shift SumHi left via c-flag; c-flag is now 0
    rrc.w   SumLo           ;; shift SumLo right; MSB of SumLo is now 0
    mov.w   SumLo, Msw      ;; copy SumLo to Msw (contains now sum&0x7FFF)
    mov.w   SumHi, &MPY     ;; copy SumHi (contains the 2 MSBs of sum) to &MPY
    mov.w   Cword, &OP2     ;; copy $c$ to &OP2 to start multiplication
    mov.w   &RESLO, SumLo   ;; load lo-word of product to SumLo
    mov.w   &RESHI, SumHi   ;; load hi-word of product to SumHi
    
    ;; In the i-th iteration of the addition loop, the words a[i] and b[i] are
    ;; added to the content of the SumHi|SumLo register-pair. Then, SumLo is
    ;; written to r[i] (via R-pointer) and the SumHi|SumLo register-pair is
    ;; shifted to the right by 16 bits to prepare for the next iteration. The
    ;; loop is iterated len-1 instead of len times since the sum of the two
    ;; most significant words a[len-1] and b[len-1] was already computed above.
    
ADDLOOP:
    add.w   @Aptr+, SumLo   ;; add a[i] to SumLo via A-pointer (with increment)
    adc.w   SumHi           ;; add c-flag to SumHi
    add.w   @Bptr+, SumLo   ;; add b[i] to SumLo via B-pointer (with increment)
    adc.w   SumHi           ;; add c-flag to SumHi
    mov.w   SumLo, 0(Rptr)  ;; store SumLo to r[i] via R-pointer
    add.w   #2, Rptr        ;; increment R-pointer
    mov.w   SumHi, SumLo    ;; copy SumHi to SumLo
    clr.w   SumHi           ;; clear SumHi
    sub.w   #2, Len         ;; decrement Len by 2
    jnz     ADDLOOP         ;; is Len == 0? if not then branch to start of loop
    
    ;; After loop-termination, R-pointer contains the address of r[len-1]. The
    ;; sum of the two most significant words a[len-1] and b[len-1] is already
    ;; in register Msw, but still needs to be added to the SumLo register. The
    ;; result (which can be at most 16 bits long) is stored to r[len-1].
    
    add.w   Msw, SumLo      ;; add Msw (i.e., sum&0x7FFF) to SumLo
    mov.w   SumLo, 0(Rptr)  ;; store SumLo to r[len-1] via R-pointer
    
    ;; Finally, the interrupts are enabled again and all callee-saved registers
    ;; are popped from the stack.
    
    EINT_                   ;; macro to enable interrupts (see mspcfg.h)
    POP_R11_TO_R8           ;; macro to pop registers R11-R8 (see mspcfg.h)
    
    RET_                    ;; RET_ is either ret or reta (see mspcfg.h)
    
END
