// Multiprecision addition of two 16-bit integer arrays (in Assembly)


#include "mspcfg.h"


// register definitions
#define LEN R15
#define BPTR R14
#define APTR R13
#define RPTR R12
#define SUM R11
#define CARRY R10


NAME int_add_msp            ; module name
PUBLIC int_add_msp          ; make int_add_msp visible outside this module
RSEG CODE                   ; place program in 'CODE' segment
int_add_msp:
    
    PUSH_R10_TO_R11         ; macro to push registers R10-R11 (see mspcfg.h)
    CLR  CARRY              ; clear CARRY register
    
LOOP:
    MOV  @APTR+, SUM        ; load a[i] to SUM register
    RRA  CARRY              ; restore carry flag; CARRY register is now 0
    ADDC @BPTR+, SUM        ; add b[i] with carry to SUM register
    ADC  CARRY              ; save the carry flag in CARRY register
    MOV  SUM, 0(RPTR)       ; write sum to r[i]
    ADD  #2, RPTR           ; increment R pointer (carry flag gets modified!)
    DEC  LEN                ; decrement LEN
    JNZ  LOOP               ; jump to 'LOOP' if LEN is not 0
    
    MOV  CARRY, R12         ; return carry bit (is either 0 or 1)    
    POP_R11_TO_R10          ; macro to pop R11-R10 and return (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
