///////////////////////////////////////////////////////////////////////////////
// int_shr.s43: Multiple-Precision 1-Bit Right-Shift (With 0 Shifted In).    //
// This file is part of SECC430, a Scalable ECC implementation for MSP430.   //
// Version 1.1.1 (2023-11-19), see <http://www.cryptolux.org/> for updates.  //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This program is free software: you can redistribute it and/or modify it   //
// under the terms of the GNU General Public License as published by the     //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This program is distributed in the hope that   //
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied     //
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  //
// GNU General Public License for more details. You should have received a   //
// copy of the GNU General Public License along with this program. If not,   //
// see <http://www.gnu.org/licenses/>.                                       //
///////////////////////////////////////////////////////////////////////////////


// Version history:
// ----------------
// 1.0.0: Lin's original implementation from her M.Sc. project
// 1.1.0: Performance improvements and further documentation added by Johann
// 1.1.1: Modified register allocation (now only R10 must be pushed/popped)


#include "mspcfg.h"

// register definitions
#define LEN R14
#define APTR R13
#define RPTR R12
#define WORD R11
#define CARRY R15


NAME int_shr_msp            ; module name
PUBLIC int_shr_msp          ; make the main label visible outside this module
RSEG CODE                   ; place program in 'CODE' segment
int_shr_msp:
    
    PUSH_R11                ; macro to push register R11 (see mspcfg.h)
    
    ADD  LEN, LEN           ; LEN contains the length of A, B, R in bytes
    ADD  LEN, RPTR
    ADD  LEN, APTR
    CLR  CARRY
    
LOOP:
    SUB  #2, APTR           ; decrement A pointer (carry flag gets modified!)
    SUB  #2, RPTR           ; decrement R pointer (carry flag gets modified!)
    MOV  @APTR, WORD        ; load a[i] to WORD
    RRA  CARRY              ; restore carry flag; CARRY register is now 0
    RRC  WORD               ; shift WORD right through carry
    ADC  CARRY              ; save the carry flag in CARRY register
    MOV  WORD, 0(RPTR)      ; write shifted word to r[i]
    SUB  #2, LEN            ; decrement len by 2
    JNZ  LOOP               ; jump to 'LOOP' if not 0
    
    MOV  CARRY, R12         ; return carry bit (is either 0 or 1)    
    POP_R11                 ; macro to pop R11 (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
