///////////////////////////////////////////////////////////////////////////////
// gfp_red.s43: Multiple-Precision Reduction Modulo a Pseudo-Mersenne Prime. //
// This file is part of SECC430, a Scalable ECC implementation for MSP430.   //
// Version 1.0.3 (2023-11-13), see <http://www.cryptolux.org/> for updates.  //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This program is free software: you can redistribute it and/or modify it   //
// under the terms of the GNU General Public License as published by the     //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This program is distributed in the hope that   //
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied     //
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  //
// GNU General Public License for more details. You should have received a   //
// copy of the GNU General Public License along with this program. If not,   //
// see <http://www.gnu.org/licenses/>.                                       //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void gfp_red_msp(UINT16 *r, const UINT16 *a, UINT16 c, int len);
// 
// Description:
// ------------
// The function gfp_red_msp computes the residue r = a mod p, where 'a' is a
// multiple-precision integer and p is a pseudo-Mersenne prime of the form
// p = 2^n - c. Both the operand and the result are stored in arrays of 16-bit
// unsigned integers (the word with index 0 is the least significant one). The
// operand 'a' consists of 2*'len' words, whereas 'r' has a length of 'len'
// words. Note that 'len' must be >= 2. The prime p is given by
// p = 2^(16*'len'-1) - 'c', where 'c' is at most 15 bits long (i.e. 'c' must
// be in the range [1, 2^15-1]). The result may not be fully reduced (i.e. the
// result is not necessarily the least non-negative residue modulo p). This
// function is described in the paper "Energy-Efficient Elliptic Curve
// Cryptography for MSP430-Based Wireless Sensor Nodes" (Proceedings of ACISP
// 2016, Springer Verlag).
// 
// Operands:
// ---------
// r: address of UINT16 array for result (must have space for 'len' words)
// a: address of UINT16 array for operand (has length of 2*'len' words)
// c: constant c of the prime p = 2^(16*'len'-1) - c, where 1 <= 'c' <= 2^15-1
// len: number of UINT16 words of 'r' ('len' must be >= 2)
// 
// Execution time (including function-call overhead):
// --------------------------------------------------
// MSP430F1611: len=10 (160 bit): 376 cycles, len=12 (192 bit): 440 cycles,
//              len=14 (224 bit): 504 cycles, len=16 (256 bit): 568 cycles
// 
// Version history:
// ----------------
// 1.0.0: Lin's original implementation from her M.Sc. project
// 1.0.1: Performance improvements and further documentation added by Johann
// 1.0.2: Modified register allocation (now only R7-R11 must be pushed/popped)
// 1.0.3: Small improvement in computation of c*(sum<<15) to save two cycles


#include "mspcfg.h"


// register definitions
#define RLOADDR R7
#define RHIADDR R8
#define SUMLO R9
#define SUMHI R10
#define BPTR R11
#define TEMP R11
#define RPTR R12
#define APTR R13
#define CWORD R14
#define LEN R15


NAME gfp_red_msp            ; module name
PUBLIC gfp_red_msp          ; make the main label visible outside this module
RSEG CODE                   ; place program in 'CODE' segment
gfp_red_msp:
    
    PUSH_R7_TO_R11          ; macro to push registers R7-R11 (see mspcfg.h)
    MOV  #RESLO, RLOADDR    ; initialize register RLOADDR with addr of RESLO
    MOV  #RESHI, RHIADDR    ; initialize register RHIADDR with addr of RESHI
    DINT                    ; disable interrupts since we use multiplier
    NOP                     ; required for DINT
    
    // prepare for first loop
    ADD  LEN, LEN           ; LEN contains length of array R in bytes
    MOV  APTR, BPTR         ; copy APTR to BPTR
    ADD  LEN, BPTR          ; BPTR contains address of a[len]
    SUB  #2, LEN            ; decrement LEN by 2
    ADD  CWORD, CWORD       ; double c
    MOV  CWORD, &MPY        ; d = 2*c is first operand for multiplication
    CLR  SUMHI              ; clear SUMHI register
    CLR  SUMLO              ; clear SUMLO register
    
LOOP1:
    MOV  @BPTR+, &OP2       ; a[i+len] is second operand for multiplication
    ADD  @RLOADDR, SUMLO    ; add lower 16 bit of product to SUMLO
    ADDC @RHIADDR, SUMHI    ; add upper 16 bit of product with carry to SUMHI
    ADD  @APTR+, SUMLO      ; add a[i] to SUMLO register
    ADC  SUMHI              ; propagate resulting carry to SUMHI register
    MOV  SUMLO, 0(RPTR)     ; write SUMLO to r[i]
    ADD  #2, RPTR           ; increment R pointer
    MOV  SUMHI, SUMLO       ; move SUMHI to SUMLO 
    CLR  SUMHI              ; clear SUMHI register
    SUB  #2, LEN            ; decrement LEN by 2
    JNZ  LOOP1              ; jump to 'LOOP1' if LEN is not 0
    
    // last iteration of first loop
    
    MOV  @BPTR, &OP2        ; a[2*len-1] is second operand for last mult.
    ADD  @RLOADDR, SUMLO    ; add lower 16 bit of product to SUMLO
    ADDC @RHIADDR, SUMHI    ; add upper 16 bit of product with carry to SUMHI
    ADD  @APTR+, SUMLO      ; add a[len-1] to SUMLO register
    ADC  SUMHI              ; propagate resulting carry to SUMHI register
    
    // now we need to restore original values of RPTR, LEN and CWORD
    
    RRC  CWORD              ; halve CWORD (carry flag was 0 before RRC!)
    MOV  BPTR, LEN          ; copy BPTR to LEN register
    SUB  APTR, LEN          ; LEN is length of array R (in bytes) minus 2
    SUB  LEN, RPTR          ; RPTR contains now address of r[0]
    
    // compute sum = c*(sum>>15) and msw = sum&0x7FFF (note that (sum>>15) is
    // 17 bits long and c is 15 bits, i.e. the product is max 32 bits long).
    // we split the multiplication of the 15-bit multiplicand c by the 17-bit
    // multiplier (sum>>15) up into a (15x16)-bit multiplication followed by
    // an addition of c to the upper word of the obtained product if the MSB
    // of (sum>>15) is 1
    
    RLA  SUMLO              ; shift SUMLO left; carry flag holds MSB
    RLC  SUMHI              ; shift SUMHI left via carry; carry flag holds MSB
    SUBC TEMP, TEMP         ; TEMP is 0xFFFF (if carry was 0) and 0 otherwise
    INV  TEMP               ; TEMP is 0 (if carry was 0) and 0xFFFF otherwise
    MOV  SUMHI, &MPY        ; SUMHI is first operand for multiplication
    MOV  CWORD, &OP2        ; CWORD is second operand for multiplication
    AND  CWORD, TEMP        ; TEMP is now either 0 or CWORD
    ADD  TEMP, &RESHI       ; add TEMP to upper half of product (carry is 0!)
    RRC  SUMLO              ; SUMLO register contains now (sum&0x7FFF)
    
    // compute r[0] += LSW(prod) and r[1] += MSW(prod)
    
    CLR  TEMP               ; clear TEMP register
    ADD  @RLOADDR, 0(RPTR)  ; add lower 16 bit of product to r[0]
    ADDC @RHIADDR, 2(RPTR)  ; add upper 16 bit of product with carrty to r[1]
    ADC  TEMP               ; propagate resulting carry to TEMP register
    
    // prepare for carry-propagation loop
    
    ADD  #4, RPTR           ; increment RPTR by 4 (contains address of r[2])
    SUB  #4, LEN            ; decrement LEN by 4 (we do len-3 iterations)
    
LOOP2:
    RRA  TEMP               ; restore carry flag; TEMP register is now 0
    ADC  0(RPTR)            ; add carry flag to r[i]
    ADC  TEMP               ; save the carry flag in TEMP register
    ADD  #2, RPTR           ; increment R pointer
    SUB  #2, LEN            ; decrement LEN by 2
    JNZ  LOOP2              ; jump to 'LOOP2' if LEN is not 0
    
    ADD  TEMP, SUMLO        ; add carry flag to SUMLO register (contains MSW)
    MOV  SUMLO, 0(RPTR)     ; write SUMLO register to r[len-1]
    
    EINT_                   ; macro to enable interrupts (see mspcfg.h)
    POP_R11_TO_R7           ; macro to pop R11-R7 and return (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
