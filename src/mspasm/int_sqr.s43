///////////////////////////////////////////////////////////////////////////////
// int_sqr.s43: Multiple-Precision Squaring (Product-Scanning Method).       //
// This file is part of SECC430, a Scalable ECC implementation for MSP430.   //
// Version 0.8.0 (2023-10-18), see <http://www.cryptolux.org/> for updates.  //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This program is free software: you can redistribute it and/or modify it   //
// under the terms of the GNU General Public License as published by the     //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This program is distributed in the hope that   //
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied     //
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  //
// GNU General Public License for more details. You should have received a   //
// copy of the GNU General Public License along with this program. If not,   //
// see <http://www.gnu.org/licenses/>.                                       //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void int_sqr_msp(UINT16 *r, const UINT16 *a, int len);
// 
// Description:
// ------------
// The function <int_sqr_msp> computes the square <r> = <a>^2, where <a> is a
// multiple-precision integer. Both the operand and the result are represented
// by arrays of 16-bit unsigned integers (the element with index 0 is the least
// significant word). The operand <a> consists of <len> words, while <r> has a
// length of 2*<len> words. Note that <len> must be >= 3. This function is
// described in the paper "Energy-Efficient Elliptic Curve Cryptography for
// MSP430-Based Wireless Sensor Nodes" (Proceedings of ACISP 2016, Springer
// Verlag).
// 
// Operands:
// ---------
// <r>: address of UINT16 array for square (must have space for 2*<len> words)
// <a>: address of UINT16 array for operand (has length of <len> words)
// <len>: number of UINT16 words of <a> (<len> must be >= 3)
// 
// Execution time (including function-call overhead) on MSP430F1611:
// -----------------------------------------------------------------
// <len> = 10 (159 bit): 1566 cycles, <len> = 12 (192 bit): 2066 cycles,
// <len> = 14 (223 bit): 2630 cycles, <len> = 16 (256 bit): 3258 cycles
// 
// Version history:
// ----------------
// 0.7.0: Lin's original implementation from her M.Sc. project
// 0.7.1: Performance improvements and further documentation added by Johann
// 0.7.2: Changed register allocation so that only R5-R11 must be pushed/popped
// 0.7.3: Optimization of the third loop to save 4 clock cycles per iteration


#include "mspcfg.h"


// Define register names

; RLOADDR holds the 16-bit address of RESLO (i.e. 0x013A)
#define RLOADDR R5
; RHIADDR holds the 16-bit address of RESHI (i.e. 0x013C)
#define RHIADDR R6
; EXTADDR holds the 16-bit address of SUMEXT (i.e. 0x013E)
#define EXTADDR R7
; ASTART holds address of first word of array <a> to be loaded in inner loop
#define ASTART R8
; WORDLO holds the lower 16 bits of a 32-bit product (only used in third loop)
#define WORDLO R8
; BSTART holds address of second word of array <a> to be loaded in inner loop
#define BSTART R9
; WORDHI holds the upper 16 bits of a 32-bit product (only used in third loop)
#define WORDHI R9
; OUTSTOP is used to determine whether the outer loop has to terminate or not
#define OUTSTOP R10
; SQRLO hold the lower 16 bits of a 32-bit square (only used in third loop)
#define SQRLO R10
; BPTR holds a pointer for loading words from array <a> (in descending order)
#define BPTR R11
; SQRHI hold the upper 16 bits of a 32-bit square (only used in third loop)
#define SQRHI R11
; RPTR holds a pointer for writing words to array <r>
#define RPTR R12
; APTR holds a pointer for loading words from array <a> (in ascending order)
#define APTR R13
; LEN holds <len> parameter, i.e. the number of words of array <a>
#define LEN R14
; CARRY holds the "guard bits" of the accumulator
#define CARRY R15


NAME int_sqr_msp            ; module name
PUBLIC int_sqr_msp          ; make module name visible to other modules
RSEG CODE                   ; module is relocatable and placed in CODE segment
int_sqr_msp:
    
    // At first, we push the callee-saved registers on the stack and disable
    // interrupts, which is necessary because the function uses the multiplier.
    
    PUSH_R5_TO_R11          ; macro to push registers R5-R11 (see mspcfg.h)
    DINT                    ; disable interrupts since we use multiplier
    NOP                     ; required for DINT
    
    // Next, the pointers and other variables are initialized. The registers
    // RLOADDR, RHIADDR, and EXTADDR hold the address of the three peripheral
    // registers RESLO, RESHI, and SUMEXT, respectively, which allows us to
    // save 1 clock cycle when reading from these registers. ASTART and BSTART
    // are both initialized with the address of a[0]. Register LEN is doubled
    // so that it holds the number of bytes of array <a>. Finally, register
    // OUTSTOP, which is used to determine the termination condition for the
    // outer loop, is initialized with the address of r[len].
    
    MOV  #RESLO, RLOADDR    ; initialize register RLOADDR with address of RESLO
    MOV  #RESHI, RHIADDR    ; initialize register RHIADDR with address of RESHI
    MOV  #SUMEXT, EXTADDR   ; initialize register EXTADDR with addr of SUMEXT
    MOV  APTR, ASTART       ; initialize register ASTART with address of a[0]
    MOV  APTR, BSTART       ; initialize register BSTART with address of a[0]
    ADD  LEN,  LEN          ; double LEN, contains now bytelength of array <a>
    MOV  LEN,  OUTSTOP      ; copy LEN to OUTSTOP register
    ADD  RPTR, OUTSTOP      ; OUTSTOP contains now address of r[len]
    
    // The three accu registers, which consist of the peripheral register pair
    // RESHI/RESLO and the CARRY register, are initialized with 0. The least
    // significant word r[0] is also set to 0 (note that the square a[0]*a[0]
    // is computed together with all other squares of the form a[i]*a[i] in the
    // third loop.
    
    CLR  &RESLO             ; clear RESLO register
    CLR  &RESHI             ; clear RESHI register
    CLR  CARRY              ; clear CARRY register
    CLR  0(RPTR)            ; write 0 to r[0] using RPTR as pointer
    ADD  #2, RPTR           ; increment RPTR
    
    // START OF FIRST OUTER LOOP
    
OUTLOOP1:
    
    // The basic structure of the two nested loops is similar to that of the
    // product-scanning multiplication, but the number of iterations differs.
    // Note that the first outer loop starts with i = 1 (since the very first
    // square, i.e. a[0]*a[0], is computed in the third loop) and iterates as
    // long as i < len. In the i-th iteration, BSTART has to be initialized
    // with the address of b[i]; for example, in the second iteration of the
    // outer loop, i.e. when i = 2, BSTART must point to a[2] before starting
    // the inner loop).
    
    ADD  #2, BSTART         ; increment BSTART to contain address of a[i]
    MOV  ASTART, APTR       ; initialize A-pointer with ASTART (addr of a[0])
    MOV  BSTART, BPTR       ; initialize B-pointer with BSTART (addr of a[i])
    
    // The inner loop performs Multiply-ACcumulate (MAC) operations of the form
    // accu = accu + a[j++]*a[k--], i.e. word a[j] is multiplied by word a[k]
    // and the 32-bit product is added to the three accu registers. The word 
    // a[j] is loaded via APTR, which gets incremented, whereas a[k] is loaded
    // through BPTR with a post-decrementation. The inner loop terminates when
    // APTR equals or exceeds BPTR.
    
INNLOOP1:
    MOV  @APTR+, &MAC       ; load a[j] to &MAC (with increment) via A-pointer
    MOV  @BPTR, &OP2        ; load a[k] to &OP2 via B-pointer
    SUB  #2, BPTR           ; decrement B-pointer
    ADD  @EXTADDR, CARRY    ; add carry bit from &SUMEXT to CARRY register
    CMP  BPTR, APTR         ; compare A-pointer with B-pointer
    JL   INNLOOP1           ; loop terminates when A-pointer >= B-pointer
    
    // In the first outer loop, the least significant 16-bit word of the accu
    // is stored to r[i] (through RPTR) and then the accu is shifted 16 bits
    // to the right. The register RPTR gets incremented after each store. The 
    // first outer loop terminates when RPTR equals or exceeds the address of
    // r[len], which happens after /len/-1 iterations.
    
    MOV  @RLOADDR, 0(RPTR)  ; write content of &RESLO to r[i] via R-pointer
    ADD  #2, RPTR           ; increment R-pointer
    MOV  @RHIADDR, &RESLO   ; copy content of &RESHI to &RESLO
    MOV  CARRY, &RESHI      ; copy CARRY register to &RESHI
    CLR  CARRY              ; clear CARRY register
    CMP  OUTSTOP, RPTR      ; compare R-pointer with address of r[len]
    JN   OUTLOOP1           ; loop terminates when R-ptr >= address of r[len]
    
    // END OF FIRST OUTER LOOP
    
    // At the end of the first outer loop, the register ASTART still contains
    // the address of a[0], while BSTART contains the address of a[len-1]. Now
    // we prepare for the second outer loop by setting OUTSTOP to the address
    // of r[2*len-2] since the second outer loop is iterated /len/-2 times.
    
    ADD  LEN, OUTSTOP       ; add LEN to OUTSTOP, contains now addr of r[2*len]
    SUB  #4, OUTSTOP        ; o-loop stops if R-ptr reaches addr of r[2*len-2]
    
    // START OF SECOND OUTER LOOP
    
OUTLOOP2:
    
    // The sceond nested loop is quite similar to the first one above. Note
    // that the second outer loop starts with i = len and iterates as long as
    // i < 2*len-2 (since the very last square, i.e. a[len-1]*a[len-1], is
    // computed in the third loop). In the i-th iteration, ASTART has to be
    // initialized with the address of a[i-len+1]; for example, in the second
    // iteration of the outer loop, i.e. when i = len+1, ASTART must point to
    // a[2] before starting the inner loop.   
    
    ADD  #2, ASTART         ; increment ASTART to hold address of a[i-len+1]
    MOV  ASTART, APTR       ; initialize A-ptr with ASTART (addr of a[i-len+1]
    MOV  BSTART, BPTR       ; initialize B-ptr with BSTART (addr of b[len-1])
    
    // The inner loop performs Multiply-ACcumulate (MAC) operations of the form
    // accu = accu + a[j++]*a[k--], i.e. word a[j] is multiplied by word a[k]
    // and the 32-bit product is added to the three accu registers. The word 
    // a[j] is loaded via APTR, which gets incremented, whereas a[k] is loaded
    // through BPTR with a post-decrementation. The inner loop terminates when
    // APTR equals or exceeds BPTR.
    
INNLOOP2:
    MOV  @APTR+, &MAC       ; load a[j] to &MAC (with increment) via A-pointer
    MOV  @BPTR, &OP2        ; load a[k] to &OP2 via B-pointer
    SUB  #2, BPTR           ; decrement B-pointer
    ADD  @EXTADDR, CARRY    ; add the carry bit in &SUMEXT to CARRY register
    CMP  BPTR, APTR         ; compare A-pointer with B-pointer
    JL   INNLOOP2           ; loop terminates when A-pointer >= B-pointer
    
    // In the second outer loop, the least significant 16-bit word of the accu
    // is stored to r[i] (through RPTR) and then the accu is shifted 16 bits
    // to the right. The register RPTR gets incremented after each store. The 
    // second outer loop terminates when RPTR equals or exceeds the address of
    // r[2*len-2], which happens after /len/-2 iterations.
    
    MOV  @RLOADDR, 0(RPTR)  ; write &RESLO to r[i] using RPTR as pointer
    ADD  #2, RPTR           ; increment RPTR
    MOV  @RHIADDR, &RESLO   ; copy &RESHI to &RESLO
    MOV  CARRY, &RESHI      ; copy CARRY register to &RESHI
    CLR  CARRY              ; clear CARRY register
    CMP  OUTSTOP, RPTR      ; compare RPTR with the address of r[2*len-2]
    JN   OUTLOOP2           ; loop terminates if RPTR >= address of r[2*len-2]
    
    // END OF SECOND OUTER LOOP
    
    // Since the second outer loop is iterated only /len/-2 times, we still
    // need to write the content of the accu registers (i.e. the 64-bit word in
    // the RESHI/RESLO register pair) to r[2*len-2] and r[2*len-1].
    
    MOV  @RLOADDR, 0(RPTR)  ; write content of &RESLO to r[2*len-2] via R-ptr
    MOV  @RHIADDR, 2(RPTR)  ; write content of &RESHI to r[2*len-1] via R-ptr
    
    // At the end of the second outer loop, ASTART contains the address of
    // of a[len-2], while BSTART still contains the address of a[len-1]. RPTR
    // holds the address of r[2*len-2]. Now we prepare for the third loop by
    // setting APTR to the address of a[0] and RPTR to the address of r[0].
    
    ADD  #4, RPTR           ; RPTR contains now the address of r[2*len]
    SUB  LEN, RPTR          ; RPTR contains now the address of r[len]
    SUB  LEN, RPTR          ; RPTR contains now the address of r[0]
    MOV  BSTART, APTR       ; APTR contains now the address of a[len-1]
    ADD  #2, APTR           ; APTR contains now the address of a[len]
    SUB  LEN, APTR          ; APTR contains now the address of a[0]
    
    // START OF THIRD LOOP
    
OUTLOOP3:
    
    // The third loop doubles the intermediate result obtained so far and adds
    // the suqares of the form a[i]*a[i]. In the i-th iteration, the word a[i] 
    // is loaded (using APTR) and then the square a[i]*a[i] is computed. The
    // carry from the previous iteration (contained in the CARRY register) is
    // added to the square and the obtained result is placed in the SQRHI|SQRLO
    // register pair.
    
    MOV  CARRY, SQRLO       ; copy CARRY register to SQRLO
    CLR  SQRHI              ; clear SQRHI
    MOV  @APTR, &MPY        ; load a[i] to &MPY using APTR as pointer
    MOV  @APTR+, &OP2       ; load a[i] to &OP2 via APTR (with increment)
    ADD  @RLOADDR, SQRLO    ; add &RESLO to SQRLO register
    ADDC @RHIADDR, SQRHI    ; add &RESHI (with carry) to SQRHI register
    CLR  CARRY              ; clear CARRY register
    
    // Next, the two words r[2*i+1] and r[2*i] are loaded to the register pair
    // WORDHI|WORDLO (using RPTR as pointer) and then doubled, whereby the
    // carry bit is placed in the CARRY register. Furthermore, SQRHI|SQRLO is
    // added to WORDHI|WORDLO and the carry bit is again added to CARRY.
    
    MOV  @RPTR+, WORDLO     ; load r[2*i] to WORDLO via RPTR (with increment)
    MOV  @RPTR+, WORDHI     ; load r[2*i+1] to WORDHI via RPTR (with increment)
    ADD  WORDLO, WORDLO     ; double WORDLO
    ADDC WORDHI, WORDHI     ; double (with carry) WORDHI
    ADC  CARRY              ; add carry bit to CARRY register
    ADD  SQRLO, WORDLO      ; add SQRLO to WORDLO register
    ADDC SQRHI, WORDHI      ; add SQRHI (with carry) to WORDHI register
    ADC  CARRY              ; add carry bit to CARRY register
    
    // Finally, the content of the WORDHI|WORDLO register pair is written to 
    // r[2*i] and r[2*i+1], respectively. The carry bits in the CARRY register
    // will be processed in the next iteration. Note that the LEN register is
    // used to count the iterations of the third loop. Since LEN holds the
    // bytelength (and not wordlength) of /a/, it is decremented by 2 in each
    // iteration and the loop terminates when LEN becomes 0.
    
    MOV  WORDLO, -4(RPTR)   ; write WORDLO to r[2*i] using RPTR as pointer
    MOV  WORDHI, -2(RPTR)   ; write WORDHI to r[2*i+1] using RPTR as pointer
    SUB  #2, LEN            ; LEN is used to count the number of iterations
    JNZ  OUTLOOP3           ; loop terminates when LEN becomes 0
    
    // END OF THIRD LOOP
    
    // Enable interrupts and pop callee-saved registers from stack
    
    EINT_                   ; macro to enable interrupts (see mspcfg.h)
    POP_R11_TO_R5           ; macro to pop registers R11-R5 (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
