///////////////////////////////////////////////////////////////////////////////
// int_mul.s43: Multiple-Precision Multiplication (Product-Scanning Method). //
// This file is part of SECC430, a Scalable ECC implementation for MSP430.   //
// Version 0.7.1 (2023-10-18), see <http://www.cryptolux.org/> for updates.  //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This program is free software: you can redistribute it and/or modify it   //
// under the terms of the GNU General Public License as published by the     //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This program is distributed in the hope that   //
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied     //
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  //
// GNU General Public License for more details. You should have received a   //
// copy of the GNU General Public License along with this program. If not,   //
// see <http://www.gnu.org/licenses/>.                                       //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void int_mul_msp(UINT16 *r, const UINT16 *a, const UINT16 *b, int len);
// 
// Description:
// ------------
// The function <int_mul_msp> computes the product <r> = <a>*<b>, where <a> and
// <b> are two multiple-precision integers. Both operands and the result are
// represented by arrays of 16-bit unsigned integers (the element with index 0
// is the least significant word). The two operands <a> and <b> consist of
// <len> words, while <r> has a length of 2*<len> words. Note that <len> must
// be >= 2. This function is described in the paper "Energy-Efficient Elliptic
// Curve Cryptography for MSP430-Based Wireless Sensor Nodes" (Proceedings of 
// ACISP 2016, Springer Verlag).
// 
// Operands:
// ---------
// r: address of UINT16 array for product (must have space for '2*len' words)
// a: address of UINT16 array for first operand (has length of 'len' words)
// b: address of UINT16 array for second operand (has length of 'len' words)
// len: number of UINT16 words of 'a' and 'b' ('len' must be >= 2)
// 
// Execution time (including function-call overhead):
// --------------------------------------------------
// MSP430F1611: len=10 (160 bit): 2060 cycles, len=12 (192 bit): 2852 cycles,
//              len=14 (224 bit): 3772 cycles, len=16 (256 bit): 4820 cycles
// 
// Version history:
// ----------------
// 1.0.0: Lin's original implementation from her M.Sc. project
// 1.1.0: Performance improvements and further documentation added by Johann


#include "mspcfg.h"


// Define register names

; RLOADDR holds the 16-bit address of RESLO (i.e. 0x013A)
#define RLOADDR R4
; RHIADDR holds the 16-bit address of RESHI (i.e. 0x013C)
#define RHIADDR R5
; EXTADDR holds the 16-bit address of SUMEXT (i.e. 0x013E)
#define EXTADDR R6
; ASTART holds address of first word of array 'a' to be loaded in inner loop
#define ASTART R7
; BSTART holds address of first word of array 'b' to be loaded in inner loop
#define BSTART R8
; INNSTOP is used to determine whether the inner loop has to terminate or not
#define INNSTOP R9
; OUTSTOP is used to determine whether the outer loop has to terminate or not
#define OUTSTOP R10
; CARRY holds the "guard bits" of the accumulator
#define CARRY R11
; RPTR holds a pointer for writing words to array 'r'
#define RPTR R12
; APTR holds a pointer for loading words from array 'a' (in ascending order)
#define APTR R13
; BPTR holds a pointer for loading words from array 'b' (in descending order)
#define BPTR R14
; LEN holds 'len' parameter, i.e. the number of words of arrays 'a' and 'b'
#define LEN R15


NAME int_mul_msp            ; module name
PUBLIC int_mul_msp          ; make module name visible to other modules
RSEG CODE                   ; module is relocatable and placed in CODE segment
int_mul_msp:
    
    // Push callee-saved registers on stack and disable interrupts
    
    PUSH_R4_TO_R11          ; macro to push registers R4-R11 (see mspcfg.h)
    DINT                    ; disable interrupts since we use multiplier
    NOP                     ; required for DINT
    
    // Initialization of pointers and variables
    
    MOV  #RESLO, RLOADDR    ; initialize register RLOADDR with addr of RESLO
    MOV  #RESHI, RHIADDR    ; initialize register RHIADDR with addr of RESHI
    MOV  #SUMEXT, EXTADDR   ; initialize register EXTADDR with addr of SUMEXT
    MOV  APTR, ASTART       ; initialize register ASTART with address of a[0]
    MOV  BPTR, BSTART       ; initialize register BSTART with address of b[0]
    MOV  BPTR, INNSTOP      ; inner loop stops when BPTR reaches addr of b[0]
    ADD  LEN,  LEN          ; double LEN, holds now num of bytes of array 'a'
    MOV  LEN,  OUTSTOP      ; copy LEN to OUTSTOP register
    ADD  RPTR, OUTSTOP      ; outer loop stops if R-ptr reaches addr of r[len]
    CLR  CARRY              ; clear CARRY register
    
    // Do first multiplication, store LSW of product to r[0], and prepare accu
    
    MOV  @APTR, &MPY        ; load a[0] to &MPY via A-pointer
    MOV  @BPTR, &OP2        ; load b[0] to &OP2 via B-pointer
    MOV  @RLOADDR, 0(RPTR)  ; write content of &RESLO to r[i] via R-pointer
    ADD  #2, RPTR           ; increment R-pointer
    MOV  @RHIADDR, &RESLO   ; copy content of &RESHI to &RESLO
    MOV  CARRY, &RESHI      ; copy CARRY register to &RESHI to clear &RESHI
    
    // START OF FIRST OUTER LOOP
    
OUTLOOP1:
    
    // Before the start of the first outer loop, ASTART contains the address
    // of a[0] and BSTART holds the address of b[0]. Note that, in the i-th
    // iteration of the outer loop, BSTART has to be initialized with the
    // address of b[i] (e.g. in the second iteration of the outer loop, i.e.
    // when i = 2, BSTART has to point to b[2] before starting the inner loop)
    
    ADD  #2, BSTART         ; increment BSTART to contain address of b[i]
    MOV  ASTART, APTR       ; initialize A-pointer with ASTART (addr of a[0])
    MOV  BSTART, BPTR       ; initialize B-pointer with BSTART (addr of b[i])
    
    // The inner loop performs MAC operations: accu = accu + a[j++]*b[k--],
    // i.e. A-pointer gets incremented and B-pointer gets decremented. The
    // inner loop terminates when B-pointer reaches the address of b[0]
    
INNLOOP1:
    MOV  @APTR+, &MAC       ; load a[j] to &MAC (with increment) via A-pointer
    MOV  @BPTR, &OP2        ; load b[k] to &OP2 via B-pointer
    SUB  #2, BPTR           ; decrement B-pointer
    ADD  @EXTADDR, CARRY    ; add carry bit from &SUMEXT to CARRY register
    CMP  INNSTOP, BPTR      ; compare B-pointer with address of b[0]
    JGE  INNLOOP1           ; loop terminates when B-pointer < address of b[0]
    
    // Store LSW of accu to r[i] and shift accu one word to the right
    
    MOV  @RLOADDR, 0(RPTR)  ; write content of &RESLO to r[i] via R-pointer
    ADD  #2, RPTR           ; increment R-pointer
    MOV  @RHIADDR, &RESLO   ; copy content of &RESHI to &RESLO
    MOV  CARRY, &RESHI      ; copy CARRY register to &RESHI
    CLR  CARRY              ; clear CARRY register
    
    CMP  OUTSTOP, RPTR      ; compare R-pointer with address of r[len]
    JN   OUTLOOP1           ; loop terminates when R-ptr >= address of r[len]
    
    // END OF FIRST OUTER LOOP
    
    // At the end of the first outer loop, ASTART contains the address of 
    // a[0], while BSTART contains the address of the most significant word of
    // array 'b', i.e. b[len-1]. Now we prepare for the second outer loop
    
    MOV  ASTART, INNSTOP    ; INNSTOP now contains the address of a[0]
    ADD  LEN, INNSTOP       ; inner loop stops if A-ptr reaches addr of a[len]
    ADD  LEN, OUTSTOP       ; add LEN to OUTSTOP (contains addr of r[2*len])
    SUB  #4, OUTSTOP        ; o-loop stops if R-ptr reaches addr of r[2*len-2]
    
    // START OF SECOND OUTER LOOP
    
OUTLOOP2:
    
    // Before the start of the second outer loop, ASTART contains the address
    // of a[0] and BSTART holds the address of b[len-1]. Note that the second
    // outer loop starts with i = len and iterates as long as i < 2*len-2
    // since we perform the very last iteration outside the loop. In the i-th
    // iteration of the outer loop, ASTART has to be initialized with the 
    // address of a[i-len+1] (e.g. in the second iteration of the outer loop,
    // i.e. when i = len+1, ASTART has to point to a[2] before starting the
    // inner loop)
    
    ADD  #2, ASTART         ; increment ASTART to hold address of a[i-len+1]
    MOV  ASTART, APTR       ; initialize A-ptr with ASTART (addr of a[i-len+1]
    MOV  BSTART, BPTR       ; initialize B-ptr with BSTART (addr of b[len-1])
    
    // The inner loop performs MAC operations: accu = accu + a[j++]*b[k--],
    // i.e. A-pointer gets incremented and B-pointer gets decremented. The
    // inner loop terminates when A-pointer reaches the address of a[len]
    
INNLOOP2:
    MOV  @APTR+, &MAC       ; load a[j] to &MAC (with increment) via A-pointer
    MOV  @BPTR, &OP2        ; load b[k] to &OP2 via B-pointer
    SUB  #2, BPTR           ; decrement B-pointer
    ADD  @EXTADDR, CARRY    ; add carry bit from &SUMEXT to CARRY register
    CMP  INNSTOP, APTR      ; compare A-pointer with address of a[len]
    JN   INNLOOP2           ; loop terminates when A-pointer >= addr of a[len]
    
    // Store LSW of accu to r[i] and shift accu one word to the right
    
    MOV  @RLOADDR, 0(RPTR)  ; write content of &RESLO to r[i] via R-pointer
    ADD  #2, RPTR           ; increment R-pointer
    MOV  @RHIADDR, &RESLO   ; copy content of &RESHI to &RESLO
    MOV  CARRY, &RESHI      ; copy CARRY register to &RESHI
    CLR  CARRY              ; clear CARRY register
    
    CMP  OUTSTOP, RPTR      ; compare R-pointer with address of r[2*len-2]
    JN   OUTLOOP2           ; loop terminates when R-ptr >= addr of r[2*len-2]
    
    // END OF SECOND OUTER LOOP
    
    // At the end of the second outer loop, BSTART contains the address of 
    // b[len-1] and &MAC still holds the word a[len-1]. Now we perform the
    // very last multiplication in which a[len-1] gets multiplied by b[len-1]
    
    MOV  @BSTART, &OP2      ; load b[len-1] to &OP2 via B-pointer
    MOV  @RLOADDR, 0(RPTR)  ; write content of &RESLO to r[2*len-2] via R-ptr
    MOV  @RHIADDR, 2(RPTR)  ; write content of &RESHI to r[2*len-1] via R-ptr
    
    // Enable interrupts and pop callee-saved registers from stack
    
    EINT_                   ; macro to enable interrupts (see mspcfg.h)
    POP_R11_TO_R4           ; macro to pop registers R11-R4 (see mspcfg.h)
    
    RET_                    ; RET_ is either RET or RETA (see mspcfg.h)
    
END
