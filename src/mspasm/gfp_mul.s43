;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gfp_mul.s43: Multiplication of elements of a pseudo-Mersenne prime field. ;;
;; This file is part of SECC430, a Scalable implementation of Elliptic Curve ;;
;; Cryptography with Assembly optimizations for MSP430(X) microcontrollers.  ;;
;; Version 2.1.0 (13-09-24), see <http://github.com/johgrolux/> for updates. ;;
;; License: GPLv3 (see LICENSE file), other licenses available upon request. ;;
;; Copyright (C) 2014-2024 University of Luxembourg <http://www.uni.lu/>     ;;
;; ------------------------------------------------------------------------- ;;
;; This program is free software: you can redistribute it and/or modify it   ;;
;; under the terms of the GNU General Public License as published by the     ;;
;; Free Software Foundation, either version 3 of the License, or (at your    ;;
;; option) any later version. This program is distributed in the hope that   ;;
;; it will be useful, but WITHOUT ANY WARRANTY; without even the implied     ;;
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  ;;
;; GNU General Public License for more details. You should have received a   ;;
;; copy of the GNU General Public License along with this program. If not,   ;;
;; see <http://www.gnu.org/licenses/>.                                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Function prototype:
;; -------------------
;; void gfp_mul_msp(Word *r, const Word *a, const Word *b, Word c, int len);
;; 
;; Description:
;; ------------
;; The function `gfp_mul_msp` computes the product $r = a \cdot b \bmod p$ of
;; two elements $a$ and $b$ of a pseudo-Mersenne prime field. The prime $p$ is
;; given by $p = 2^k - c$, where $k$ is a multiple of the word-size minus 1
;; (determined by parameter `len`) and $c$ is at most 14 bits long. Operands
;; $a$ and $b$ are allowed to be larger than $p$. The result $r$ may not be
;; fully reduced, but $r$ is always less than $2p$.
;; 
;; Parameters:
;; -----------
;; `r`: pointer to array for result, must have space for `len` words
;; `a`: pointer to array containing 1st operand, has a length of `len` words
;; `b`: pointer to array containing 2nd operand, has a length of `len` words
;; `c`: word containing constant $c$ of prime $p$, $c \in [1, 2^{14}-1]$
;; `len`: number of words of arrays `a`, `b`, and `r`, must be >= 4
;; 
;; Execution time (from `call` to `ret`, measured using Disassembly window):
;; -------------------------------------------------------------------------
;; MSP430F1611: len=10 (160 bits): 2419 cycles, len=12 (192 bits): 3271 cycles,
;;              len=14 (224 bits): 4251 cycles, len=16 (256 bits): 5359 cycles
;; 
;; Version history:
;; ----------------
;; 1.0.0: Lin's original implementation from her M.Sc. project.
;; 1.1.0: Performance improvements and further documentation added by Johann.
;; 1.1.1: Jumps carried out by the loops use now `jlo` instruction.
;; 1.1.2: Placed an instruction between multiplication and access of product.
;; 2.0.0: Merged multiplication (int_mul) and modular reduction (gfp_red).
;; 2.1.0: Reduced maximum length of constant `c` from 15 to 14 bits.


#include "mspcfg.h"


RSEG CODE
NAME gfp_mul_msp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; REGISTER NAMES, CONSTANTS, AND MACROS ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Multiplication - 2 loops

;; Register `Rlptr` points to the location of RESLO in memory (0x013A)
#define Rlptr r4
;; Register `Rhptr` points to the location of RESHI in memory (0x013C)
#define Rhptr r5
;; Register `Exptr` points to the location of SUMEXT in memory (0x013E)
#define Exptr r6
;; Register `A1ptr` points to 1st word of `a` processed in inner loop
#define A1ptr r7
;; Register `B1ptr` points to 1st word of `b` processed in inner loop
#define B1ptr r8
;; Register `Istop` determines when the inner loop ends its iterations
#define Istop r9
;; Register `Ostop` determines when the outer loop ends its iterations
#define Ostop r10
;; Register `Len` contains the length of the arrays (in words or bytes)
#define Len r11
;; Register `Rptr` points to a word contained in the result-array `r`
#define Rptr r12
;; Register `Aptr` points to a word contained in the operand-array `a`
#define Aptr r13
;; Register `Bptr` points to a word contained in the operand-array `b`
#define Bptr r14
;; Register `SumEx` contains the extension bits of a cumulative sum
#define SumEx r15

;; Reduction modulo prime p

;; Register `SumLo` contains the lower word of a 2-word (32-bit) sum
#define SumLo r7
;; Register `SumHi` contains the upper word of a 2-word (32-bit) sum
#define SumHi r8
;; Register `Temp` contains temporary values (e.g., carry propagation)
#define Temp r9
;; Register `Tlptr` points to a word in lower half of product-array `t`
#define Tlptr r13
;; Register `Thptr` points to a word in upper half of product-array `t`
#define Thptr r14
;; Register `Cword` contains the 14-bit constant $c$ of the prime $p$
#define Cword r15


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; ASSEMBLY FUNCTION FOR MULTIPLICATION IN GF(P) ;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


PUBLIC gfp_mul_msp
gfp_mul_msp:
    
    ;; At first, eight callee-saved registers are pushed on the stack and the
    ;; 5th parameter `len` is loaded from the stack. The 4th parameter `c` is
    ;; stored on the stack (at the location of `len`) to free up a register.
    ;; Furthermore, the pointers to RESLO, RESHI, and SUMEXT are initialized
    ;; and register `Len` is doubled so that it contains the operand-length in
    ;; bytes instead of words, which simplifies the pointer arithmetic.
    
    PUSH_R4_TO_R11          ;; macro to push 8 registers r4-r11 (mspcfg.inc)
    mov.w   OFS(8)(sp), r11 ;; load param `len` from stack to r11 (mspasm.inc)
    mov.w   r15, OFS(8)(sp) ;; store param `c` in r15 to stack (mspasm.inc)
    mov.w   #RESLO, Rlptr   ;; set Rl-pointer to address of RESLO
    mov.w   #RESHI, Rhptr   ;; set Rh-pointer to address of RESHI
    mov.w   #SUMEXT, Exptr  ;; set Ex-pointer to address of SUMEXT
    add.w   Len, Len        ;; set Len to number of bytes of operands
    dint                    ;; disable interrupts (because multiplier is used)
    nop                     ;; required for dint
    
    ;; The first nested loop computes the lower half (i.e., the $len$ least-
    ;; significant words) of the product $t = a \cdot b$ stores it on the stack
    ;; via push instructions (i.e., t[0] has a higher address than t[1]). To
    ;; reduce the execution time, some pointers and variables are used, which
    ;; need to be initialized. A1-pointer and B1-pointer contain the address of
    ;; those words of array `a` and `b` that are multiplied in the very first
    ;; iteration of the inner loop. Istop and Ostop are used to determine when
    ;; the inner/outer loop has to terminate.
    
    mov.w   Aptr, A1ptr     ;; set A1-pointer to address of a[0]
    mov.w   Bptr, B1ptr     ;; set B1-pointer to address of b[0]
    sub.w   #2, B1ptr       ;; set B1-pointer to address of b[-1]
    mov.w   B1ptr, Istop    ;; set i-loop stopper to address of b[-1]
    mov.w   sp, Ostop       ;; set o-loop stopper to address of t[-1] on stack
    sub.w   Len, Ostop      ;; set o-loop stopper to address of t[len-1]
    clr.w   SumEx           ;; clear ex-bits (in SumEx) of cumulative sum
    mov.w   SumEx, &RESLO   ;; clear lo-word of cumulative sum
    mov.w   SumEx, &RESHI   ;; clear hi-word of cumulative sum
    
    ;; Each iteration of the first outer loop produces a word of the lower half
    ;; of the product. This loop is iterated $len$ times (i.e., from $i = 0$ to
    ;; $i = len-1$) and computes the product-words t[0] to t[len-1]. At the
    ;; start of the i-th iteration, B1-pointer is initialized with the address
    ;; of b[i]; for example, at the start of the third iteration of the loop
    ;; (i.e., $i = 2$), B1-pointer has to point to b[2] and A1-pointer to a[0].
    
OUTLOOP1:
    
    add.w   #2, B1ptr       ;; set B1-pointer to address of b[i]
    mov.w   A1ptr, Aptr     ;; set A-pointer to address of a[0]
    mov.w   B1ptr, Bptr     ;; set B-pointer to address of b[i]
    
    ;; In each iteration of the inner loop, a multiply-accumulate operation of
    ;; the form sum = sum + a[j++]*b[k--] is carried out, whereby the two words
    ;; of the cumulative sum are stored at &RESLO|&RESHI and the extension bits
    ;; in register SumEx. Furthermore, A-pointer is (automatically) incremented
    ;; and B-pointer decremented. The inner loop ends when B-pointer reached
    ;; the address of b[-1].
    
INNLOOP1:
    mov.w   @Aptr+, &MAC    ;; copy a[j] to &MAC (with increment of A-pointer)
    mov.w   @Bptr, &OP2     ;; copy b[k] to &OP2 to start MAC operation
    sub.w   #2, Bptr        ;; decrement B-pointer
    add.w   @Exptr, SumEx   ;; add carry-bit at &SUMEXT to SumEx
    cmp.w   Bptr, Istop     ;; compare B-pointer with address of b[-1] (Istop)
    jlo     INNLOOP1        ;; continue loop if address of b[-1] < B-pointer
    
    ;; After termination of the inner loop, the least-significant word of the
    ;; cumulative sum is written to t[i] (on the stack) and the cumulative sum
    ;; is shifted one word to the right.
    
    push.w  @Rlptr          ;; store lo-word of sum to t[i] on the stack
    mov.w   @Rhptr, &RESLO  ;; copy hi-word of sum to lo-word of sum
    mov.w   SumEx, &RESHI   ;; copy ex-bits of sum (in SumEx) to hi-word of sum
    clr.w   SumEx           ;; clear SumEx
    cmp.w   sp, Ostop       ;; compare stack-ptr with addr of t[len-1] (Ostp)
    jlo     OUTLOOP1        ;; continue loop if address of t[len-1] < stack-ptr
    
    ;; At the end of the first nested loop, A1-pointer contains the address of
    ;; a[0] and B1-pointer contains the address of b[len-1]. The second nested
    ;; loop computes the upper half (i.e., the $len$ most-significant words) of
    ;; the product $t = a \cdot b$ stores it on the stack via push instructions
    ;; (i.e., t[len] has a higher address than t[len+1]). Similar to the first
    ;; nested loop, Istop and Ostop have to be initialized.
    
    mov.w   A1ptr, Istop    ;; set i-loop stopper to address of a[0]
    add.w   Len, Istop      ;; set i-loop stopper to address of a[len]
    sub.w   Len, Ostop      ;; set o-loop stopper to address of t[2*len-1]
    add.w   #2, Ostop       ;; set o-loop stopper to address of t[2*len-2]
    
    ;; Each iteration of the second outer loop produces a word of the higher
    ;; half of the product. This loop is iterated $len-1$ times (i.e., from
    ;; $i = len$ to $i = 2*len-2$ and computes the product-words t[len] to
    ;; t[2*len-1]. The last iteration of the loop, in which a[len-1]*b[len-1]
    ;; is computed, actually contributes two words to the product, namely the
    ;; words t[2*len-2] and t[2*len-1]. At the start of the i-th iteration,
    ;; A1-pointer is initialized with the address of a[i-len+1]; for example,
    ;; at the start of the third iteration of the loop (i.e., $i = len+2$),
    ;; A1-pointer has to point to a[3] and B1-pointer to b[len-1]. 
    
OUTLOOP2:
    
    add.w   #2, A1ptr       ;; set A1-pointer to address of a[i-len+1]
    mov.w   A1ptr, Aptr     ;; set A-pointer to address of a[i-len+1]
    mov.w   B1ptr, Bptr     ;; set B-pointer to address of b[len-1]
    
    ;; In each iteration of the inner loop, a multiply-accumulate operation of
    ;; the form sum = sum + a[j++]*b[k--] is carried out, whereby the two words
    ;; of the cumulative sum are stored at &RESLO|&RESHI and the extension bits
    ;; in register SumEx. Furthermore, A-pointer is (automatically) incremented
    ;; and B-pointer decremented. The inner loop ends when A-pointer reached
    ;; the address of a[len].
    
INNLOOP2:
    mov.w   @Aptr+, &MAC    ;; copy a[j] to &MAC (with increment of A-pointer)
    mov.w   @Bptr, &OP2     ;; copy b[k] to &OP2 to start MAC operation
    sub.w   #2, Bptr        ;; decrement B-pointer
    add.w   @Exptr, SumEx   ;; add carry-bit at &SUMEXT to SumEx
    cmp.w   Istop, Aptr     ;; compare address of a[len] (Istop) with A-pointer
    jlo     INNLOOP2        ;; continue loop if A-pointer < address of a[len]
    
    ;; After termination of the inner loop, the least-significant word of the
    ;; cumulative sum is written to t[i] (on the stack) and the cumulative sum
    ;; is shifted one word to the right.
    
    push.w  @Rlptr          ;; store lo-word of sum to t[i] on the stack
    mov.w   @Rhptr, &RESLO  ;; copy hi-word of sum to lo-word of sum
    mov.w   SumEx, &RESHI   ;; copy ex-bits of sum (in SumEx) to hi-word of sum
    clr.w   SumEx           ;; clear SumEx
    cmp.w   sp, Ostop       ;; compare stack-ptr with adr of t[2*len-2] (Ostop)
    jlo     OUTLOOP2        ;; continue loop if addr of t[2*len-2] < stack-ptr
    
    push.w  @Rlptr          ;; store word at &RESLO to t[2*len-1] on the stack
    
    ;; At this point the multiplication is finished and the $2len$ words of the
    ;; product $t = a \cdot b$ are on the stack. The reduction modulo the prime
    ;; $p = 2^k - c$ uses its own pointers, namely TL-pointer and TH-pointer,
    ;; which have to be initialized. TH-pointer is used to access words of the
    ;; upper half of the product, while TL-pointer enables fast access to words
    ;; of the lower half. Also parameter `c` has to be loaded from the stack.
    
    mov.w   sp, Thptr       ;; set TH-pointer to address of t[2*len-1]
    add.w   Len, Thptr      ;; set TH-pointer to address of t[len-1]
    mov.w   Thptr, Tlptr    ;; copy TH-pointer to TL-pointer
    add.w   Len, Tlptr      ;; set TL-pointer to address of t[-1]
    mov.w   OFS(8)(Tlptr), Cword ;; load parameter `c` from stack (mspasm.inc)
    sub.w   #2, Thptr       ;; set TH-pointer to address of t[len]
    sub.w   #2, Tlptr       ;; set TL-pointer to address of t[0]
    
    ;; The first step of the modular reduction consists of the multiplication
    ;; of the upper part of the product by $2c$ and the addition of the lower
    ;; part to the result, i.e., a computation of the form $r = th*2*c + tl$.
    ;; This computation is performed through a loop, for which a loop-stopper
    ;; and some variables need to be initialized.
    
    add.w   Cword, Cword    ;; set Cword to 2*c
    mov.w   Cword, &MPY     ;; copy 2*c to &MPY
    mov.w   Rptr, Ostop     ;; set o-loop stopper to address of r[0]
    add.w   Len, Ostop      ;; set o-loop stopper to address of r[len]
    sub.w   #2, Ostop       ;; set o-loop stopper to address of r[len-1]
    clr.w   SumHi           ;; clear SumHi
    clr.w   SumLo           ;; clear SumLo
    
    ;; In each iteration of the first reduction loop, a word t[len+i] from the
    ;; upper part is multiplied by $d = 2c$ and a word t[i] from the lower part
    ;; is added to the product, resulting in a sum consisting of two words, to
    ;; which the upper word of the sum of the previous iteration is added. The
    ;; lower word of the result is written to r[i] using R-pointer. This first
    ;; reduction loop is iterated $len$ times, whereby the last iteration is
    ;; done outside the loop-body (i.e., after termination of the loop).
    
REDLOOP1:
    mov.w   @Thptr, &OP2    ;; copy t[i+len] to &OP2 to start multiplication
    sub.w   #2, Thptr       ;; decrement TH-pointer
    add.w   @Rlptr, SumLo   ;; add lo-word of product to SumLo
    addc.w  @Rhptr, SumHi   ;; add hi-word of product with c-flag to SumHi
    add.w   @Tlptr, SumLo   ;; add t[i] to SumLo
    adc.w   SumHi           ;; add generated c-flag to SumHi
    sub.w   #2, Tlptr       ;; decrement TL-pointer
    mov.w   SumLo, 0(Rptr)  ;; store SumLo to r[i]
    add.w   #2, Rptr        ;; increment R-pointer
    mov.w   SumHi, SumLo    ;; copy SumHi to SumLo 
    clr.w   SumHi           ;; clear SumHi
    cmp.w   Ostop, Rptr     ;; compare addr of r[len-1] (Ostop) with R-pointer
    jlo     REDLOOP1        ;; continue loop if R-pointer < address of r[len-1]
    
    ;; The computation carried out in the last iteration is the same as in the
    ;; other iterations, but the sum is kept in the SumHi|SumLo register pair
    ;; and not written to the result-array `r`.
    
    mov.w   @Thptr, &OP2    ;; copy t[2*len-1] to &OP2 to start multiplication
    add.w   @Tlptr, SumLo   ;; add t[len-1] to SumLo
    adc.w   SumHi           ;; add generated c-flag to SumHi
    add.w   @Rlptr, SumLo   ;; add lo-word of product to SumLo
    addc.w  @Rhptr, SumHi   ;; add hi-word of product with c-flag to SumHi
    
    ;; The first reduction step yielded an intermediate result consisting of
    ;; $len+1$ words. Consequently, a second step is necessary to get a result
    ;; of a length of $len$ words. For this second step, the original value of
    ;; the constant `c` in Cword has to be restored to its original value and
    ;; R-pointer has to be initialized.
    
    rra.w   Cword           ;; halve Cword
    sub.w   Len, Rptr       ;; set R-pointer to address of r[-1]
    add.w   #2, Rptr        ;; set R-pointer to address of r[0]
    
    ;; The sum in the SumHi|SumLo register pair is up to 31 bits long when the
    ;; constant `c` has a length of at most 14 bits. The second reduction-step
    ;; requires to split the 32-bit sum up into a lower part of 15 bits and an
    ;; upper part of 16 bits, which is multiplied by $c$ to yield a product of
    ;; up to 30 bits in length. This 30-bit product is added to r[0] and r[1].
    
    rla.w   SumLo           ;; shift SumLo left; c-flag is MSB of lo-part
    rlc.w   SumHi           ;; shift SumHi left via c-flag; c-flag is now 0
    mov.w   Cword, &MPY     ;; copy 2*c to &MPY
    mov.w   SumHi, &OP2     ;; copy SumHi (16-bit hi-part) to &OP2 to start mul
    rrc.w   SumLo           ;; set SumLo to 15-bit lo-part (sum&0x7FFF)
    clr.w   Temp            ;; clear Temp
    add.w   @Rlptr, 0(Rptr) ;; add lo-word of product to r[0]
    addc.w  @Rhptr, 2(Rptr) ;; add hi-word of product with c-flag to r[1]
    adc.w   Temp            ;; add generated c-flag to Temp
    add.w   #4, Rptr        ;; set R-pointer to address of r[2]
    
    ;; The addition of the 30-bit product to r[0] and r[1] may have produced a
    ;; carry, which has to the propagated all the way up to r[len-1], which is
    ;; done with a simple carry-propagation loop. This loop starts at r[2] and
    ;; is iterated $len-2$ times, whereby the last iteration is done outside
    ;; the loop-body (i.e., after termination of the loop).
    
REDLOOP2:
    rra.w   Temp            ;; restore c-flag; Temp is now 0
    adc.w   0(Rptr)         ;; add c-flag to r[i]
    adc.w   Temp            ;; save c-flag in Temp
    add.w   #2, Rptr        ;; increment R-pointer
    cmp.w   Ostop, Rptr     ;; compare addr of r[len-1] (Ostop) with R-pointer
    jlo     REDLOOP2        ;; continue loop if R-pointer < address of r[len-1]
    
    ;; The carry-propagation of the last iteration simply consists of adding
    ;; the c-flag (in Temp) to r[len-1], which is the SumLo register.
    
    add.w   Temp, SumLo     ;; add c-flag to SumLo (contains r[len-1])
    mov.w   SumLo, 0(Rptr)  ;; store SumLo to r[len-1]
    
    ;; The final task is to enable the interrupts, remove the space occupied by
    ;; the product (i.e., $2len$ words) from the stack, and pop callee-saved
    ;; registers.
    
    EINT_                   ;; macro to enable interrupts (see mspcfg.h)
    add.w   Len, sp         ;; remove len words from stack
    add.w   Len, sp         ;; remove len words from stack
    POP_R11_TO_R4           ;; macro to pop registers R11-R4 (see mspcfg.h)
    RET_                    ;; RET_ is either ret or reta (see mspcfg.h)
    
END
